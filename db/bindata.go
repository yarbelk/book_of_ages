// Code generated by go-bindata.
// sources:
// migrations/01_initial.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations01_initialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x53\xbd\x6e\xc2\x30\x18\x9c\xe3\xa7\xf8\x46\xa2\xc2\x13\x64\x4a\xe1\x0b\xb2\x5a\x1c\x64\x8c\x04\x53\x14\x61\x37\xb2\x44\x6c\xe4\xb8\xa2\xbc\x7d\xad\xa8\xa4\x01\x11\x2a\x06\x86\x4e\xb1\xee\x62\xdf\xdd\xf7\x33\x99\xc0\x4b\xad\x2b\x57\x7a\x05\xeb\x03\x99\x72\x4c\x05\x82\x48\x5f\xdf\x11\x68\x06\x2c\x17\x80\x1b\xba\x12\x2b\x38\x5a\xb7\x97\x0d\x8c\x48\xa4\x25\x50\x26\x70\x8e\x1c\x96\x9c\x2e\x52\xbe\x85\x37\xdc\x42\xba\x16\x39\x65\xe1\x85\x05\x32\x31\x26\x91\x29\x6b\x05\x02\x37\xe1\x0c\xe0\x5d\x69\x9a\x7d\x50\x91\x45\x87\x93\x38\x21\xf7\x14\x9d\xaa\xb4\x35\x57\x92\xe1\xe1\xd6\x49\x71\x01\xf5\xb4\x22\x7f\x3a\x74\xe7\x9e\xbf\x91\x96\x63\x38\x5f\x8d\x03\x97\xe5\x1c\xe9\x9c\xb5\x5c\x87\x03\xc7\x0c\x39\xb2\x29\x9e\x13\x87\x7b\xf1\x5f\x4e\x3f\x8d\x54\xae\x72\x36\x7c\x8b\xff\xe3\xba\xd1\x5e\x3d\xec\xf3\xab\xd8\x59\xeb\xfa\xec\xe9\x1a\x09\xdd\x7e\x52\x98\x7b\x69\x4a\xe7\xf5\x47\xb9\xf3\x0f\x27\x0a\x55\xa8\x9f\x61\xb6\xbf\x5a\x33\x7b\x34\x84\xcc\x78\xbe\xfc\xf5\x7e\xb1\x57\xc9\x6d\xf2\x67\x98\x06\xd8\x1b\x63\x37\xf0\x67\xdb\xea\x01\xae\x2b\x5c\x42\xbe\x03\x00\x00\xff\xff\xf9\x48\x04\x0e\x0e\x04\x00\x00")

func migrations01_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations01_initialSql,
		"migrations/01_initial.sql",
	)
}

func migrations01_initialSql() (*asset, error) {
	bytes, err := migrations01_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/01_initial.sql", size: 1038, mode: os.FileMode(436), modTime: time.Unix(1442209635, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/01_initial.sql": migrations01_initialSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"01_initial.sql": &bintree{migrations01_initialSql, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

