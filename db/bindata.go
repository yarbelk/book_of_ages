// Code generated by go-bindata.
// sources:
// migrations/01_initial.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations01_initialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\xc1\x6e\xea\x30\x10\x3c\xe3\xaf\xd8\x23\xe8\x3d\xbe\x80\x53\x80\x05\x45\x85\x04\x19\x23\xc1\x29\x72\x13\x13\x2c\x41\x1c\x6d\x8c\x68\xfe\xbe\x06\x95\x10\x5a\x42\x55\x45\x95\x7a\xca\x6a\xc6\xce\x8c\x67\xbd\xee\xf7\xe1\xdf\x41\xa7\x24\xad\x82\x55\xce\x46\x1c\x3d\x81\x20\xbc\xe1\x0c\xc1\x9f\x40\x10\x0a\xc0\xb5\xbf\x14\x4b\x38\x19\xda\x27\x05\x74\x59\x47\x27\xe0\x07\x02\xa7\xc8\x61\xc1\xfd\xb9\xc7\x37\xf0\x82\x1b\xf0\x56\x22\xf4\x03\xf7\x87\x39\x06\xe2\x3f\xeb\x64\xf2\xa0\x40\xe0\xda\xd5\x00\x96\x64\x56\xec\x9d\x4a\x12\x55\x38\xeb\x0d\xd8\x33\x45\x52\xa9\x36\xd9\x13\x49\x27\x72\x71\x15\xdd\xe8\x7b\xdd\x8e\x2d\xf3\xaa\x9e\x84\x1c\xfd\x69\x70\xde\xd8\xbd\x6e\xeb\x01\xc7\x09\x72\x0c\x46\x78\x3d\x61\xd7\xa1\xdf\x39\x3b\x66\x89\xa2\x94\x8c\xfb\x46\x7f\xd7\x65\xa1\xad\x6a\xe5\xeb\x2d\x8a\x8d\xa1\x3a\x5b\x7e\x46\x5c\x67\x5b\x98\x7f\xe6\x5e\x92\xd5\x5b\x19\xdb\x56\x27\x70\x09\x1c\x7e\x21\xd9\x9d\x2e\xac\x21\x1d\xcb\x7d\xb4\xd5\xe9\x91\xda\xc5\x4c\x32\xae\xea\x58\x16\xf6\x36\x35\x32\xcf\x95\x24\x75\x97\xf7\xab\x26\xbb\x8b\x4a\x87\xd7\xd1\x44\xc9\x07\xa8\x2c\x0a\x13\xeb\xcb\xd4\xd5\xda\x74\x5e\xad\x6d\x09\xc3\x30\x9c\xa1\x17\x9c\x81\xad\x21\xe7\xa1\x02\x7e\x1e\x56\xfd\x1d\x19\x9b\x53\xc6\xd8\x98\x87\x8b\x5b\x78\x77\x8f\xc8\xe0\x31\xf9\x31\x49\x0d\xec\x83\x99\x6b\x58\x79\xb9\xf7\x0d\x5c\x75\xab\x1a\xf8\xaf\x9d\x1d\xb0\xf7\x00\x00\x00\xff\xff\x2a\x39\x42\x54\x24\x05\x00\x00")

func migrations01_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations01_initialSql,
		"migrations/01_initial.sql",
	)
}

func migrations01_initialSql() (*asset, error) {
	bytes, err := migrations01_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/01_initial.sql", size: 1316, mode: os.FileMode(436), modTime: time.Unix(1444025659, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/01_initial.sql": migrations01_initialSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"01_initial.sql": &bintree{migrations01_initialSql, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

